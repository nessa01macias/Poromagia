All the source code implemented:
    text_parser_class -> Class created to extract the name and type of card, situated at the top and around the middle
    of it. The card goes through various pre-processing methods: first, it is converted to black and white, as that
    makes the processing easier and consumes less computation resources, then thresholding is applied in order to get a
    clear contrast of the text, then the regions of interest are extracted, and they are removed noise and eliminated
    borders if the image is mainly white.
    data_cleaning -> File created to preprocess the bluck data from scryfall. There are multiple columns that were not
    useful, so they are dropped, as well as selecting the large image of each card into a column. It may change and
    integration with a database has not been done yet.
    image_recognition_class -> Class created to find the card among all the more than 300.000 possibilities of match.
    The class receives the data gotten from the text_parser_class, and goes through multiple steps as: excluding from
    the database every card that does not have the same name, type or language as the original card, opening all the
    possible matches images, and finding the similarities between the original card and each one of the matches.
    The one that performs the better (gets the highest score in the orb_sim function), is the image we are looking for.
    get_match -> File created in order to link both of the main classes, text_parser and image_recognition and make
    tests with the results.